'''
Реализуйте класс PositiveList, отнаследовав его от класса list, для хранения положительных целых чисел.
Также реализуйте новое исключение NonPositiveError.

В классе PositiveList переопределите метод append(self, x) таким образом, чтобы при попытке добавить
неположительное целое число бросалось исключение NonPositiveError и число не добавлялось,
а при попытке добавить положительное целое число, число добавлялось бы как в стандартный list.

В данной задаче гарантируется, что в качестве аргумента x метода append всегда будет передаваться целое число.

Примечание:
Положительными считаются числа, строго большие нуля.
'''
#------------------------------------------------------------------------------------------------------------------------------------------
'''Пример из прошлой задачи, для проработки алгоритма.'''
#
PATH = '/home/asumin/Документы/Программирование Python/stepik.org/Основы и применение/Исключения/test'
#PATH = '/home/asumin/Документы/Программирование Python/Stepic.org/Основы и применение/Исключения/test'
#
def read_file(p):
    with open(p) as file:
        return [i.strip().split(':') for i in file.readlines()]
#
r = read_file(PATH) # ф-ция. read_file(PATH) возвр. список [[''],['']]
dict_class = {} # добавл. в словарь предка и наследника.
#
def add_dict(p):
    for i in range(1, int(p[0][0])+1):
        if len(p[i]) == 1:
            dict_class[p[i][0]] = []  # Убираем пробелы, доводим до состояния {'..':[]}
        else:
            dict_class[p[i][0].strip()] = ''.join(p[i][1:]).strip().split() # Убираем пробелы, доводим до состояния {'..':['..']}
    print(dict_class) # печатаем словарь.
#
add_dict(r)
#
k = int(r[0][0])+2 # Для среза
arr = [''.join(i) for i in r[k:]] # Получаем список из запросов.
print(arr) # печатаем список.
print('- * '*10)
#
def rec(parr): # Создаем рекурсию.
    for p in dict_class[parr]:
        #print(f'{p} - p(i)')
        dk.add(p) # Добавл. в dk родителей
        rec(p)
#
arr_req = set() # Добавлям
def run():
    for i in arr: # Идем по списку.
        #print(f'{i} - i')
        global dk # Делаем глобальную переменн. для множества, чтобы рекурсия смогла добавить итерир. обьекты
        dk = set() # Обнуляем пустое множество.
        rec(i) # Вызывем рекурсию и передаем ей итер. аргумент.
        for j in dk:
            print(f'{dk} - dk')
            print(f'{arr_req} - arr_req')
            if j in arr_req:
                print(f'{i} - Нашли' ); break
        arr_req.add(i)
        print(f'{arr_req} - arr_req')
#
run()
#-----------------------------------------------------------------------------


